// Unless explicitly stated otherwise all files in this repository are licensed
// under the Apache License Version 2.0.
// This product includes software developed at Datadog (https://www.datadoghq.com/).
// Copyright 2016-present Datadog, Inc.

// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: appsec.proto

/*
	Package pb is a generated protocol buffer package.

	It is generated from these files:
		appsec.proto

	It has these top-level messages:
		AppSecStruct
		AppSecTrigger
		AppSecRuleTrigger
		AppSecRuleMatch
		AppSecRuleParameter
*/
package pb

import proto "github.com/gogo/protobuf/proto"
import fmt "fmt"
import math "math"
import _ "github.com/gogo/protobuf/gogoproto"

import io "io"

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion2 // please upgrade the proto package

// AppSecStruct is a container for AppSec data sent by the tracers.
type AppSecStruct struct {
	Triggers []*AppSecTrigger `protobuf:"bytes,1,rep,name=triggers" json:"triggers" msg:"triggers"`
}

func (m *AppSecStruct) Reset()                    { *m = AppSecStruct{} }
func (m *AppSecStruct) String() string            { return proto.CompactTextString(m) }
func (*AppSecStruct) ProtoMessage()               {}
func (*AppSecStruct) Descriptor() ([]byte, []int) { return fileDescriptorAppsec, []int{0} }

func (m *AppSecStruct) GetTriggers() []*AppSecTrigger {
	if m != nil {
		return m.Triggers
	}
	return nil
}

// AppSecTrigger associates an AppSec rule and the data that triggered.
type AppSecTrigger struct {
	Rule        *AppSecRuleTrigger `protobuf:"bytes,1,opt,name=rule" json:"rule" msg:"rule"`
	RuleMatches []*AppSecRuleMatch `protobuf:"bytes,2,rep,name=rule_matches,json=ruleMatches" json:"rule_matches" msg:"rule_matches"`
}

func (m *AppSecTrigger) Reset()                    { *m = AppSecTrigger{} }
func (m *AppSecTrigger) String() string            { return proto.CompactTextString(m) }
func (*AppSecTrigger) ProtoMessage()               {}
func (*AppSecTrigger) Descriptor() ([]byte, []int) { return fileDescriptorAppsec, []int{1} }

func (m *AppSecTrigger) GetRule() *AppSecRuleTrigger {
	if m != nil {
		return m.Rule
	}
	return nil
}

func (m *AppSecTrigger) GetRuleMatches() []*AppSecRuleMatch {
	if m != nil {
		return m.RuleMatches
	}
	return nil
}

// AppSecRuleTrigger represents an AppSec rule that triggered.
type AppSecRuleTrigger struct {
	Id   string            `protobuf:"bytes,1,opt,name=id,proto3" json:"id" msg:"id"`
	Name string            `protobuf:"bytes,2,opt,name=name,proto3" json:"name" msg:"name"`
	Tags map[string]string `protobuf:"bytes,3,rep,name=tags" json:"tags" msg:"tags" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
}

func (m *AppSecRuleTrigger) Reset()                    { *m = AppSecRuleTrigger{} }
func (m *AppSecRuleTrigger) String() string            { return proto.CompactTextString(m) }
func (*AppSecRuleTrigger) ProtoMessage()               {}
func (*AppSecRuleTrigger) Descriptor() ([]byte, []int) { return fileDescriptorAppsec, []int{2} }

func (m *AppSecRuleTrigger) GetTags() map[string]string {
	if m != nil {
		return m.Tags
	}
	return nil
}

// AppSecRuleMatch represents an AppSec rule match.
type AppSecRuleMatch struct {
	Operator      string                 `protobuf:"bytes,1,opt,name=operator,proto3" json:"operator" msg:"operator"`
	OperatorValue string                 `protobuf:"bytes,2,opt,name=operator_value,json=operatorValue,proto3" json:"operator_value" msg:"operator_value"`
	Parameters    []*AppSecRuleParameter `protobuf:"bytes,3,rep,name=parameters" json:"parameters" msg:"parameters"`
}

func (m *AppSecRuleMatch) Reset()                    { *m = AppSecRuleMatch{} }
func (m *AppSecRuleMatch) String() string            { return proto.CompactTextString(m) }
func (*AppSecRuleMatch) ProtoMessage()               {}
func (*AppSecRuleMatch) Descriptor() ([]byte, []int) { return fileDescriptorAppsec, []int{3} }

func (m *AppSecRuleMatch) GetParameters() []*AppSecRuleParameter {
	if m != nil {
		return m.Parameters
	}
	return nil
}

// AppSecRuleParameter represents the data matched by an AppSec rule.
type AppSecRuleParameter struct {
	Address string `protobuf:"bytes,1,opt,name=address,proto3" json:"address" msg:"address"`
	// key_path can be either string or int so it cannot be represented using protobuf
	// repeated string key_path = 2 [(gogoproto.jsontag) = "key_path", (gogoproto.moretags) = "msg:\"key_path\""];
	Value     string   `protobuf:"bytes,3,opt,name=value,proto3" json:"value" msg:"value"`
	Highlight []string `protobuf:"bytes,4,rep,name=highlight" json:"highlight" msg:"highlight"`
}

func (m *AppSecRuleParameter) Reset()                    { *m = AppSecRuleParameter{} }
func (m *AppSecRuleParameter) String() string            { return proto.CompactTextString(m) }
func (*AppSecRuleParameter) ProtoMessage()               {}
func (*AppSecRuleParameter) Descriptor() ([]byte, []int) { return fileDescriptorAppsec, []int{4} }

func init() {
	proto.RegisterType((*AppSecStruct)(nil), "pb.AppSecStruct")
	proto.RegisterType((*AppSecTrigger)(nil), "pb.AppSecTrigger")
	proto.RegisterType((*AppSecRuleTrigger)(nil), "pb.AppSecRuleTrigger")
	proto.RegisterType((*AppSecRuleMatch)(nil), "pb.AppSecRuleMatch")
	proto.RegisterType((*AppSecRuleParameter)(nil), "pb.AppSecRuleParameter")
}
func (m *AppSecStruct) Marshal() (data []byte, err error) {
	size := m.Size()
	data = make([]byte, size)
	n, err := m.MarshalTo(data)
	if err != nil {
		return nil, err
	}
	return data[:n], nil
}

func (m *AppSecStruct) MarshalTo(data []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Triggers) > 0 {
		for _, msg := range m.Triggers {
			data[i] = 0xa
			i++
			i = encodeVarintAppsec(data, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(data[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	return i, nil
}

func (m *AppSecTrigger) Marshal() (data []byte, err error) {
	size := m.Size()
	data = make([]byte, size)
	n, err := m.MarshalTo(data)
	if err != nil {
		return nil, err
	}
	return data[:n], nil
}

func (m *AppSecTrigger) MarshalTo(data []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Rule != nil {
		data[i] = 0xa
		i++
		i = encodeVarintAppsec(data, i, uint64(m.Rule.Size()))
		n1, err := m.Rule.MarshalTo(data[i:])
		if err != nil {
			return 0, err
		}
		i += n1
	}
	if len(m.RuleMatches) > 0 {
		for _, msg := range m.RuleMatches {
			data[i] = 0x12
			i++
			i = encodeVarintAppsec(data, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(data[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	return i, nil
}

func (m *AppSecRuleTrigger) Marshal() (data []byte, err error) {
	size := m.Size()
	data = make([]byte, size)
	n, err := m.MarshalTo(data)
	if err != nil {
		return nil, err
	}
	return data[:n], nil
}

func (m *AppSecRuleTrigger) MarshalTo(data []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Id) > 0 {
		data[i] = 0xa
		i++
		i = encodeVarintAppsec(data, i, uint64(len(m.Id)))
		i += copy(data[i:], m.Id)
	}
	if len(m.Name) > 0 {
		data[i] = 0x12
		i++
		i = encodeVarintAppsec(data, i, uint64(len(m.Name)))
		i += copy(data[i:], m.Name)
	}
	if len(m.Tags) > 0 {
		for k, _ := range m.Tags {
			data[i] = 0x1a
			i++
			v := m.Tags[k]
			mapSize := 1 + len(k) + sovAppsec(uint64(len(k))) + 1 + len(v) + sovAppsec(uint64(len(v)))
			i = encodeVarintAppsec(data, i, uint64(mapSize))
			data[i] = 0xa
			i++
			i = encodeVarintAppsec(data, i, uint64(len(k)))
			i += copy(data[i:], k)
			data[i] = 0x12
			i++
			i = encodeVarintAppsec(data, i, uint64(len(v)))
			i += copy(data[i:], v)
		}
	}
	return i, nil
}

func (m *AppSecRuleMatch) Marshal() (data []byte, err error) {
	size := m.Size()
	data = make([]byte, size)
	n, err := m.MarshalTo(data)
	if err != nil {
		return nil, err
	}
	return data[:n], nil
}

func (m *AppSecRuleMatch) MarshalTo(data []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Operator) > 0 {
		data[i] = 0xa
		i++
		i = encodeVarintAppsec(data, i, uint64(len(m.Operator)))
		i += copy(data[i:], m.Operator)
	}
	if len(m.OperatorValue) > 0 {
		data[i] = 0x12
		i++
		i = encodeVarintAppsec(data, i, uint64(len(m.OperatorValue)))
		i += copy(data[i:], m.OperatorValue)
	}
	if len(m.Parameters) > 0 {
		for _, msg := range m.Parameters {
			data[i] = 0x1a
			i++
			i = encodeVarintAppsec(data, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(data[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	return i, nil
}

func (m *AppSecRuleParameter) Marshal() (data []byte, err error) {
	size := m.Size()
	data = make([]byte, size)
	n, err := m.MarshalTo(data)
	if err != nil {
		return nil, err
	}
	return data[:n], nil
}

func (m *AppSecRuleParameter) MarshalTo(data []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Address) > 0 {
		data[i] = 0xa
		i++
		i = encodeVarintAppsec(data, i, uint64(len(m.Address)))
		i += copy(data[i:], m.Address)
	}
	if len(m.Value) > 0 {
		data[i] = 0x1a
		i++
		i = encodeVarintAppsec(data, i, uint64(len(m.Value)))
		i += copy(data[i:], m.Value)
	}
	if len(m.Highlight) > 0 {
		for _, s := range m.Highlight {
			data[i] = 0x22
			i++
			l = len(s)
			for l >= 1<<7 {
				data[i] = uint8(uint64(l)&0x7f | 0x80)
				l >>= 7
				i++
			}
			data[i] = uint8(l)
			i++
			i += copy(data[i:], s)
		}
	}
	return i, nil
}

func encodeFixed64Appsec(data []byte, offset int, v uint64) int {
	data[offset] = uint8(v)
	data[offset+1] = uint8(v >> 8)
	data[offset+2] = uint8(v >> 16)
	data[offset+3] = uint8(v >> 24)
	data[offset+4] = uint8(v >> 32)
	data[offset+5] = uint8(v >> 40)
	data[offset+6] = uint8(v >> 48)
	data[offset+7] = uint8(v >> 56)
	return offset + 8
}
func encodeFixed32Appsec(data []byte, offset int, v uint32) int {
	data[offset] = uint8(v)
	data[offset+1] = uint8(v >> 8)
	data[offset+2] = uint8(v >> 16)
	data[offset+3] = uint8(v >> 24)
	return offset + 4
}
func encodeVarintAppsec(data []byte, offset int, v uint64) int {
	for v >= 1<<7 {
		data[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	data[offset] = uint8(v)
	return offset + 1
}
func (m *AppSecStruct) Size() (n int) {
	var l int
	_ = l
	if len(m.Triggers) > 0 {
		for _, e := range m.Triggers {
			l = e.Size()
			n += 1 + l + sovAppsec(uint64(l))
		}
	}
	return n
}

func (m *AppSecTrigger) Size() (n int) {
	var l int
	_ = l
	if m.Rule != nil {
		l = m.Rule.Size()
		n += 1 + l + sovAppsec(uint64(l))
	}
	if len(m.RuleMatches) > 0 {
		for _, e := range m.RuleMatches {
			l = e.Size()
			n += 1 + l + sovAppsec(uint64(l))
		}
	}
	return n
}

func (m *AppSecRuleTrigger) Size() (n int) {
	var l int
	_ = l
	l = len(m.Id)
	if l > 0 {
		n += 1 + l + sovAppsec(uint64(l))
	}
	l = len(m.Name)
	if l > 0 {
		n += 1 + l + sovAppsec(uint64(l))
	}
	if len(m.Tags) > 0 {
		for k, v := range m.Tags {
			_ = k
			_ = v
			mapEntrySize := 1 + len(k) + sovAppsec(uint64(len(k))) + 1 + len(v) + sovAppsec(uint64(len(v)))
			n += mapEntrySize + 1 + sovAppsec(uint64(mapEntrySize))
		}
	}
	return n
}

func (m *AppSecRuleMatch) Size() (n int) {
	var l int
	_ = l
	l = len(m.Operator)
	if l > 0 {
		n += 1 + l + sovAppsec(uint64(l))
	}
	l = len(m.OperatorValue)
	if l > 0 {
		n += 1 + l + sovAppsec(uint64(l))
	}
	if len(m.Parameters) > 0 {
		for _, e := range m.Parameters {
			l = e.Size()
			n += 1 + l + sovAppsec(uint64(l))
		}
	}
	return n
}

func (m *AppSecRuleParameter) Size() (n int) {
	var l int
	_ = l
	l = len(m.Address)
	if l > 0 {
		n += 1 + l + sovAppsec(uint64(l))
	}
	l = len(m.Value)
	if l > 0 {
		n += 1 + l + sovAppsec(uint64(l))
	}
	if len(m.Highlight) > 0 {
		for _, s := range m.Highlight {
			l = len(s)
			n += 1 + l + sovAppsec(uint64(l))
		}
	}
	return n
}

func sovAppsec(x uint64) (n int) {
	for {
		n++
		x >>= 7
		if x == 0 {
			break
		}
	}
	return n
}
func sozAppsec(x uint64) (n int) {
	return sovAppsec(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *AppSecStruct) Unmarshal(data []byte) error {
	l := len(data)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowAppsec
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := data[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: AppSecStruct: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: AppSecStruct: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Triggers", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAppsec
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthAppsec
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Triggers = append(m.Triggers, &AppSecTrigger{})
			if err := m.Triggers[len(m.Triggers)-1].Unmarshal(data[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipAppsec(data[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthAppsec
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *AppSecTrigger) Unmarshal(data []byte) error {
	l := len(data)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowAppsec
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := data[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: AppSecTrigger: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: AppSecTrigger: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Rule", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAppsec
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthAppsec
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Rule == nil {
				m.Rule = &AppSecRuleTrigger{}
			}
			if err := m.Rule.Unmarshal(data[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field RuleMatches", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAppsec
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthAppsec
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.RuleMatches = append(m.RuleMatches, &AppSecRuleMatch{})
			if err := m.RuleMatches[len(m.RuleMatches)-1].Unmarshal(data[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipAppsec(data[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthAppsec
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *AppSecRuleTrigger) Unmarshal(data []byte) error {
	l := len(data)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowAppsec
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := data[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: AppSecRuleTrigger: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: AppSecRuleTrigger: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAppsec
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthAppsec
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Id = string(data[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Name", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAppsec
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthAppsec
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Name = string(data[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Tags", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAppsec
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthAppsec
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			var keykey uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAppsec
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				keykey |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			var stringLenmapkey uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAppsec
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				stringLenmapkey |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLenmapkey := int(stringLenmapkey)
			if intStringLenmapkey < 0 {
				return ErrInvalidLengthAppsec
			}
			postStringIndexmapkey := iNdEx + intStringLenmapkey
			if postStringIndexmapkey > l {
				return io.ErrUnexpectedEOF
			}
			mapkey := string(data[iNdEx:postStringIndexmapkey])
			iNdEx = postStringIndexmapkey
			if m.Tags == nil {
				m.Tags = make(map[string]string)
			}
			if iNdEx < postIndex {
				var valuekey uint64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowAppsec
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := data[iNdEx]
					iNdEx++
					valuekey |= (uint64(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				var stringLenmapvalue uint64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowAppsec
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := data[iNdEx]
					iNdEx++
					stringLenmapvalue |= (uint64(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				intStringLenmapvalue := int(stringLenmapvalue)
				if intStringLenmapvalue < 0 {
					return ErrInvalidLengthAppsec
				}
				postStringIndexmapvalue := iNdEx + intStringLenmapvalue
				if postStringIndexmapvalue > l {
					return io.ErrUnexpectedEOF
				}
				mapvalue := string(data[iNdEx:postStringIndexmapvalue])
				iNdEx = postStringIndexmapvalue
				m.Tags[mapkey] = mapvalue
			} else {
				var mapvalue string
				m.Tags[mapkey] = mapvalue
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipAppsec(data[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthAppsec
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *AppSecRuleMatch) Unmarshal(data []byte) error {
	l := len(data)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowAppsec
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := data[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: AppSecRuleMatch: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: AppSecRuleMatch: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Operator", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAppsec
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthAppsec
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Operator = string(data[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field OperatorValue", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAppsec
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthAppsec
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.OperatorValue = string(data[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Parameters", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAppsec
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthAppsec
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Parameters = append(m.Parameters, &AppSecRuleParameter{})
			if err := m.Parameters[len(m.Parameters)-1].Unmarshal(data[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipAppsec(data[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthAppsec
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *AppSecRuleParameter) Unmarshal(data []byte) error {
	l := len(data)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowAppsec
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := data[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: AppSecRuleParameter: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: AppSecRuleParameter: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Address", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAppsec
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthAppsec
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Address = string(data[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Value", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAppsec
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthAppsec
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Value = string(data[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Highlight", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAppsec
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthAppsec
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Highlight = append(m.Highlight, string(data[iNdEx:postIndex]))
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipAppsec(data[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthAppsec
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipAppsec(data []byte) (n int, err error) {
	l := len(data)
	iNdEx := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowAppsec
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := data[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowAppsec
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if data[iNdEx-1] < 0x80 {
					break
				}
			}
			return iNdEx, nil
		case 1:
			iNdEx += 8
			return iNdEx, nil
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowAppsec
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			iNdEx += length
			if length < 0 {
				return 0, ErrInvalidLengthAppsec
			}
			return iNdEx, nil
		case 3:
			for {
				var innerWire uint64
				var start int = iNdEx
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return 0, ErrIntOverflowAppsec
					}
					if iNdEx >= l {
						return 0, io.ErrUnexpectedEOF
					}
					b := data[iNdEx]
					iNdEx++
					innerWire |= (uint64(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				innerWireType := int(innerWire & 0x7)
				if innerWireType == 4 {
					break
				}
				next, err := skipAppsec(data[start:])
				if err != nil {
					return 0, err
				}
				iNdEx = start + next
			}
			return iNdEx, nil
		case 4:
			return iNdEx, nil
		case 5:
			iNdEx += 4
			return iNdEx, nil
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
	}
	panic("unreachable")
}

var (
	ErrInvalidLengthAppsec = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowAppsec   = fmt.Errorf("proto: integer overflow")
)

func init() { proto.RegisterFile("appsec.proto", fileDescriptorAppsec) }

var fileDescriptorAppsec = []byte{
	// 557 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x6c, 0x53, 0xc1, 0x6e, 0xd3, 0x40,
	0x10, 0xc5, 0x4e, 0x0a, 0xcd, 0x24, 0x69, 0xd3, 0x6d, 0x01, 0xab, 0x42, 0xd9, 0x68, 0x0f, 0x28,
	0xaa, 0x84, 0x2b, 0x15, 0x09, 0x50, 0x0e, 0x48, 0xb5, 0xc4, 0x09, 0x55, 0x82, 0x6d, 0xc5, 0x05,
	0x41, 0xe5, 0xc4, 0x8b, 0x63, 0x91, 0xd4, 0xd6, 0x7a, 0x8d, 0xd4, 0xbf, 0xe0, 0x5b, 0xb8, 0x73,
	0xe7, 0xc8, 0x17, 0xac, 0x50, 0x38, 0xe1, 0xa3, 0xef, 0x48, 0xc8, 0xe3, 0xac, 0x93, 0x94, 0x9e,
	0xb2, 0xef, 0xbd, 0x79, 0x6f, 0x67, 0x66, 0x63, 0xe8, 0xf8, 0x49, 0x92, 0x8a, 0x89, 0x9b, 0xc8,
	0x58, 0xc5, 0xc4, 0x4e, 0xc6, 0x87, 0x4f, 0xc2, 0x48, 0x4d, 0xb3, 0xb1, 0x3b, 0x89, 0xe7, 0xc7,
	0x61, 0x1c, 0xc6, 0xc7, 0x28, 0x8d, 0xb3, 0x4f, 0x88, 0x10, 0xe0, 0xa9, 0xb2, 0xb0, 0x0f, 0xd0,
	0x39, 0x4d, 0x92, 0x73, 0x31, 0x39, 0x57, 0x32, 0x9b, 0x28, 0x72, 0x06, 0xdb, 0x4a, 0x46, 0x61,
	0x28, 0x64, 0xea, 0x58, 0x83, 0xc6, 0xb0, 0x7d, 0xb2, 0xe7, 0x26, 0x63, 0xb7, 0xaa, 0xb9, 0xa8,
	0x14, 0xaf, 0x9f, 0x6b, 0x5a, 0x97, 0x15, 0x9a, 0xee, 0xcc, 0xd3, 0x70, 0xc4, 0x0c, 0xc1, 0x78,
	0xad, 0xb1, 0x6f, 0x16, 0x74, 0x37, 0xbc, 0xe4, 0x14, 0x9a, 0x32, 0x9b, 0x09, 0xc7, 0x1a, 0x58,
	0xc3, 0xf6, 0xc9, 0xfd, 0x55, 0x38, 0xcf, 0x66, 0xc2, 0x5c, 0xf0, 0x20, 0xd7, 0x14, 0xcb, 0x0a,
	0x4d, 0x01, 0xc3, 0x4b, 0xc0, 0x38, 0x72, 0xe4, 0x23, 0x74, 0xca, 0xdf, 0xcb, 0xb9, 0xaf, 0x26,
	0x53, 0x91, 0x3a, 0x36, 0xf6, 0xb9, 0xbf, 0x19, 0x75, 0x56, 0x8a, 0xde, 0xe3, 0x5c, 0xd3, 0x8d,
	0xe2, 0x42, 0x53, 0x52, 0x07, 0x1a, 0x92, 0xf1, 0xb6, 0x34, 0x16, 0x91, 0xb2, 0x3f, 0x16, 0xec,
	0xfd, 0xd7, 0x13, 0x61, 0x60, 0x47, 0x01, 0xb6, 0xdd, 0xf2, 0x48, 0xae, 0xa9, 0x1d, 0x05, 0x85,
	0xa6, 0xdb, 0x18, 0x16, 0x05, 0x8c, 0xdb, 0x51, 0x40, 0x8e, 0xa0, 0x79, 0xe5, 0xcf, 0x85, 0x63,
	0x63, 0x15, 0x4e, 0x51, 0xe2, 0x7a, 0x8a, 0x12, 0x30, 0x8e, 0x1c, 0x79, 0x0d, 0x4d, 0xe5, 0x87,
	0xa9, 0xd3, 0xc0, 0xee, 0xe9, 0xad, 0x8b, 0x70, 0x2f, 0xfc, 0x30, 0x7d, 0x75, 0xa5, 0xe4, 0x75,
	0x15, 0x56, 0x1a, 0xea, 0xb0, 0x12, 0x30, 0x8e, 0xdc, 0xe1, 0x73, 0x68, 0xd5, 0xa5, 0xa4, 0x07,
	0x8d, 0xcf, 0xe2, 0xba, 0x6a, 0x95, 0x97, 0x47, 0x72, 0x00, 0x5b, 0x5f, 0xfc, 0x59, 0xb6, 0x6c,
	0x8c, 0x57, 0x60, 0x64, 0xbf, 0xb0, 0xd8, 0x5f, 0x0b, 0x76, 0x6f, 0x2c, 0x8d, 0x8c, 0x60, 0x3b,
	0x4e, 0x84, 0xf4, 0x55, 0x2c, 0x97, 0xf3, 0xe2, 0x83, 0x1b, 0xae, 0x7e, 0x70, 0x43, 0x30, 0x5e,
	0x6b, 0xe4, 0x2d, 0xec, 0x98, 0xf3, 0xe5, 0xda, 0x95, 0xde, 0x51, 0xae, 0xe9, 0x0d, 0xa5, 0xd0,
	0xf4, 0x60, 0x23, 0xa7, 0xa2, 0x19, 0xef, 0x1a, 0xe2, 0x5d, 0x89, 0xc9, 0x7b, 0x80, 0xc4, 0x97,
	0xfe, 0x5c, 0xa8, 0xf2, 0x4f, 0x59, 0xad, 0xeb, 0xe1, 0xe6, 0xba, 0xde, 0x18, 0xdd, 0x63, 0xb9,
	0xa6, 0x6b, 0xe5, 0x85, 0xa6, 0x3d, 0xbc, 0x63, 0x45, 0x31, 0xbe, 0xa6, 0xb3, 0xef, 0x16, 0xec,
	0xdf, 0x92, 0x43, 0x9e, 0xc1, 0x3d, 0x3f, 0x08, 0xa4, 0x48, 0xd3, 0xe5, 0x0a, 0x1e, 0xe5, 0x9a,
	0x1a, 0xaa, 0xd0, 0xb4, 0x8b, 0xa9, 0x4b, 0xcc, 0xb8, 0x51, 0x88, 0x6b, 0x36, 0xdd, 0x40, 0x97,
	0x93, 0x6b, 0xba, 0x65, 0xa6, 0x6d, 0xa3, 0x67, 0x39, 0x64, 0xc5, 0x92, 0x97, 0xd0, 0x9a, 0x46,
	0xe1, 0x74, 0x16, 0x85, 0x53, 0xe5, 0x34, 0x07, 0x8d, 0x61, 0xcb, 0x1b, 0xe4, 0x9a, 0xae, 0xc8,
	0x42, 0xd3, 0x5d, 0xf4, 0xd5, 0x0c, 0xe3, 0x2b, 0xd5, 0xeb, 0xfd, 0x58, 0xf4, 0xad, 0x9f, 0x8b,
	0xbe, 0xf5, 0x6b, 0xd1, 0xb7, 0xbe, 0xfe, 0xee, 0xdf, 0x19, 0xdf, 0xc5, 0x0f, 0xfb, 0xe9, 0xbf,
	0x00, 0x00, 0x00, 0xff, 0xff, 0xc9, 0x75, 0xa6, 0xea, 0x1b, 0x04, 0x00, 0x00,
}
